# Calling order convention (NO UB under glsl)
# Replace with ~ ext_1 by (false ? ext_1 : ~ ext_1) for difference with LLVMPipe

GLES 3.1
CREATE_BUFFER buffer_0 SIZE_BYTES 28 INIT_VALUES uint 98 4294967295 0 30 61445388 12 uint 2015865638
BIND_SHADER_STORAGE_BUFFER BUFFER buffer_0 BINDING 0

CREATE_BUFFER buffer_1 SIZE_BYTES 12 INIT_VALUES float 12372261.0 2493899.0 8598609.0
BIND_SHADER_STORAGE_BUFFER BUFFER buffer_1 BINDING 1

CREATE_BUFFER buffer_2 SIZE_BYTES 20 INIT_VALUES float 12756677.0 6448637.0 3732446.0 6406442.0 4140854.0
BIND_SHADER_STORAGE_BUFFER BUFFER buffer_2 BINDING 2

CREATE_BUFFER buffer_3 SIZE_BYTES 48 INIT_VALUES float 3864587.0 9550839.0 4465047.0 10146177.0 4143232.0 13112158.0 uint 3915382498 1 3820635270 1397736343 3835892720 2
BIND_SHADER_STORAGE_BUFFER BUFFER buffer_3 BINDING 3

DECLARE_SHADER shader KIND COMPUTE
#version 310 es
uint SAFE_BITFIELD_INSERT(uint p0);
int SAFE_ABS(int p0);
layout(local_size_x = 1) in;
layout(std430, binding = 0) buffer buffer_0 {
 uint ext_0;
 uint ext_1;
};
layout(std430, binding = 3) buffer buffer_3 {
 float ext_4;
 uint ext_5[6];
};
int SAFE_ABS(int A)
{
 return A == -2147483648 ? 2147483647 : abs(A);
}
uint SAFE_BITFIELD_INSERT(uint base, uint insert, int offset, int bits)
{
 int safe_offset = SAFE_ABS(offset) % 32;
 int safe_bits = SAFE_ABS(bits) % (32 - safe_offset);
 return bitfieldInsert(base, insert, safe_offset, safe_bits);
}
void main()
{
 ext_5[0] = SAFE_BITFIELD_INSERT( ~ ext_1, ext_1 &= 9u, 1, 2147483646);
}

END

COMPILE_SHADER shader_compiled SHADER shader
CREATE_PROGRAM compute_prog SHADERS shader_compiled
RUN_COMPUTE PROGRAM compute_prog NUM_GROUPS 1 1 1
DUMP_BUFFER_TEXT BUFFER buffer_2 FILE "buffer_2.txt" FORMAT "buffer_2 " float 5
DUMP_BUFFER_TEXT BUFFER buffer_3 FILE "buffer_3.txt" FORMAT "buffer_3 " float 6 " " uint 6
